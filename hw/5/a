#include <bits/stdc++.h>

using namespace std;  // NOLINT

int r, c, m;

namespace case1 {

const int MAXN = 2e2 + 2;
const int MAXM = 1e3 + 2;

int p[MAXN][MAXN];
int cnt[MAXN][MAXN][MAXM], sum[MAXN][MAXN][MAXM], num[MAXN][MAXN][MAXM];

auto Calc(int a[MAXN][MAXN][MAXM], int x1, int y1, int x2, int y2, int k) -> int {
  return a[x2][y2][k] - a[x2][y1 - 1][k] - a[x1 - 1][y2][k] + a[x1 - 1][y1 - 1][k];
}

void Solve() {
  int tmp[MAXM];
  for (int i = 1; i <= r; i++) {
    memset(tmp, 0, sizeof(tmp));
    for (int j = 1; j <= c; j++) {
      cin >> p[i][j];
      tmp[p[i][j]]++;
      for (int k = MAXM - 2; k > 0; k--) {
        cnt[i][j][k] = cnt[i - 1][j][k] + tmp[k];
        num[i][j][k] = num[i][j][k + 1] + cnt[i][j][k];
        sum[i][j][k] = sum[i][j][k + 1] + cnt[i][j][k] * k;
      }
    }
  }
  for (int i = 1; i <= m; i++) {
    int x1, y1, x2, y2, h; // NOLINT
    cin >> x1 >> y1 >> x2 >> y2 >> h;
    int l = 1, r = 1000, res = -1;  // NOLINT
    while (l <= r) {
      int mid = (l + r) >> 1;
      if (Calc(sum, x1, y1, x2, y2, mid) >= h) {
        l = mid + 1;
        res = mid;
      } else {
        r = mid - 1;
      }
    }
    if (res == -1) {
      puts("Impossible");
    } else {
      cout << Calc(num, x1, y1, x2, y2, res) - (Calc(sum, x1, y1, x2, y2, res) - h) / res << '\n';
    }
  }
}

}  // namespace case1

auto main() -> int {
  ios::sync_with_stdio(false);
  cin >> r >> c >> m;
  if (r != 1) {
    case1::Solve();
  }
  return 0;
}